header = [
    "The following are the results of preliminary benchmarking and should be",
    "taken with a big grain of ðŸ§‚.",
]

url = "https://udoprog.github.io/musli/benchmarks"
branch = "gh-pages"

# features expected to be common to all.
common = ["no-rt", "std", "alloc"]

[missing_features]
no-atomic = "Atomic types like `AtomicU32` are not supported."
no-atomic-bool = "The `AtomicBool` type is not supported."
no-atomic-isize = "The `AtomicIsize` type is not supported."
no-atomic-usize = "The `AtomicUsize` type is not supported."
no-binary-equality = "Values are not preserved exactly when serialized and deserialized. Such as floating point values, even when they are exact."
no-bool = "Boolean types are not supported."
no-char = "Character types like `char` are not supported."
no-cstr = "`CString`'s are not supported."
no-empty = "Empty variants are not supported."
no-i128 = "128-bit signed integers are not supported."
no-isize = "Pointed-sized `isize` types are not supported."
no-alloc-map = "Maps like `MashMap<K, V>` are not supported."
no-newtype = "Newtype variants are not supported."
no-nonunit-variant = "Only empty unit variants are supported."
no-number-key = "Maps with numerical keys like `HashMap<u32, T>` are not supported."
no-osstr = "`OsString`'s are not supported."
no-path = "Path types `PathBuf` or `Box<Path>` are not supported."
no-saturating = "The `Saturating<T>` numerical wrapper is not supported."
no-alloc-set = "Sets like `HashSet<T>` are not supported."
no-str = "String types are not supported."
no-str-key = "Maps with strings as keys like `HashMap<String, T>` are not supported."
no-str-set = "String sets like `HashSet<String>` are not supported."
no-tuple = "Tuples like `(u32, u32)` are not supported."
no-u128 = "128-bit unsigned integers are not supported."
no-u64 = "Format is limited to the bounds of signed 64-bit integers."
no-unsized = "Unsized contained types like `Box<str>` or `Rc<str>` are not supported."
no-unsized-box = "Boxed unsized values like `Box<str>` are not supported."
no-unsized-cstr = "Reference counted unsized containers of `CStr` like `Rc<CStr>` are not supported."
no-unsized-osstr = "Reference counted unsized containers of `OsStr` like `Rc<OsStr>` are not supported."
no-unsized-path = "Reference counted unsized containers of `Path` like `Rc<Path>` are not supported."
no-unsized-rc = "Reference counted unsized containers like `Rc<str>` are not supported."
no-unsized-str = "Reference counted unsized containers of `str` like `Rc<str>` are not supported."
no-usize = "Pointed-sized `usize` types are not supported."
no-wrapping = "The `Wrapping<T>` numerical wrapper is not supported."
no-nonzero = "The `NonZero*` wrapper types are not supported."
no-nonzero-u8 = "The `NonZeroU8` wrapper type is not supported."
no-nonzero-u16 = "The `NonZeroU16` wrapper type is not supported."
no-nonzero-u32 = "The `NonZeroU32` wrapper type is not supported."
no-nonzero-u64 = "The `NonZeroU64` wrapper type is not supported."
no-nonzero-u128 = "The `NonZeroU128` wrapper type is not supported."
no-nonzero-usize = "The `NonZeroUsize` wrapper type is not supported."
no-nonzero-signed = "The `NonZeroI*` signed wrapper types are not supported."

[[kinds]]
id = "dec"
description = "Decode a type."

[[kinds]]
id = "enc"
description = "Encode a type."

[[groups]]
id = "primitives"
description = "A small object containing one of each primitive type and a string and a byte array."

[[groups]]
id = "packed"
description = "Tried to achieve the same goal as `primitives`, but with a packed layout to support certain zerocopy libraries."

[[groups]]
id = "full_enum"
description = "An enum with every kind of supported variant."

[[groups]]
id = "large"
description = "A really big and complex struct."

[[groups]]
id = "allocated"
description = "A sparse struct which contains fairly plain allocated data like strings and vectors."

[[groups]]
id = "mesh"
description = "A mesh containing triangles."

[[reports]]
id = "full"
title = "Full features"
link = "full-features"
description = [
    "These frameworks provide a fair comparison against MÃ¼sli on various areas since",
    "they support the same set of features in what types of data they can represent.",
]
features = [
    "musli-wire",
    "musli-descriptive",
    "musli-storage",
    "musli-packed",
    "musli-value",
    "bincode1",
    "bincode-serde",
    "rmp-serde",
    "postcard",
    "bitcode",
    "simdutf8",
]
expected = [
    "musli", "serde"
]

[[reports]]
id = "bincode"
title = "Features supported by bincode (derive)"
link = "bincode"
description = [
    "These frameworks are limited to the features supported by bincode (derive).",
]
features = [
    "musli-wire",
    "musli-descriptive",
    "musli-storage",
    "musli-packed",
    "musli-value",
    "bincode-derive",
]
expected = [
    "musli",
    "no-cstr",
    "no-osstr",
    "no-saturating",
    "no-unsized-cstr",
    "no-unsized-osstr",
    "no-unsized-path",
]

[[reports]]
id = "text"
title = "Text-based formats"
link = "text-based-formats"
description = [
    "These are text-based formats, which support the full feature set of this test suite.",
]
features = [
    "musli-json",
    "serde_json",
    "simd-json",
    "simdutf8",
]
expected = [
    "musli",
    "serde",
]

[[reports]]
id = "fewer"
title = "Fewer features"
link = "fewer-features"
description = [
    "This is a suite where support for 128-bit integers and maps are disabled.",
    "Usually because the underlying framework lacks support for them.",
]
features = [
    "musli-wire",
    "musli-descriptive",
    "musli-storage",
    "musli-packed",
    "musli-value",
    "serde_cbor",
    # broken
    # "dlhn",
    "simdutf8",
]
expected = [
    "musli",
    "serde",
    "no-i128",
    "no-alloc-map",
    "no-nonzero-i128",
    "no-nonzero-u128",
    "no-saturating-i128",
    "no-saturating-u128",
    "no-u128",
    "no-wrapping-i128",
    "no-wrapping-u128",
]

[[reports]]
id = "speedy"
title = "Speedy"
link = "speedy"
description = [
    "This is a test suite for speedy features.",
]
features = [
    "musli-wire",
    "musli-descriptive",
    "musli-storage",
    "musli-packed",
    "musli-value",
    "speedy",
]
expected = [
    "musli",
    "no-alloc-binaryheap",
    "no-alloc-vecdeque",
    "no-atomic-bool",
    "no-atomic-isize",
    "no-atomic-usize",
    "no-cstr",
    "no-isize",
    "no-nonzero-i128",
    "no-nonzero-isize",
    "no-nonzero-signed",
    "no-nonzero-u128",
    "no-nonzero-u16",
    "no-nonzero-u64",
    "no-nonzero-u8",
    "no-nonzero-usize",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-unsized-cstr",
    "no-unsized-osstr",
    "no-unsized-path",
    "no-unsized-rc",
    "no-wrapping",
]

[[reports]]
id = "epserde"
title = "Îµ-serde"
link = "Îµ-serde"
description = [
    "This is a test suite for Îµ-serde features.",
]
features = [
    "musli-wire",
    "musli-descriptive",
    "musli-storage",
    "musli-packed",
    "musli-value",
    "epserde",
]
expected = [
    "musli",
    "no-alloc-binaryheap",
    "no-alloc-btree",
    "no-alloc-map",
    "no-alloc-set",
    "no-alloc-vecdeque",
    "no-atomic",
    "no-cstr",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-unsized-cstr",
    "no-unsized-osstr",
    "no-unsized-path",
    "no-unsized-rc",
    "no-wrapping",
]
only = ["primitives", "packed", "mesh"]

[[reports.env]]
key = "MUSLI_VEC_RANGE"
value = "10000..20000"
description = """
Îµ-serde benefits from larger inputs, this ensures that the size of the supported suite (primarily `mesh`) reflects that by making the inputs bigger.
"""

[[reports]]
id = "rkyv"
title = "MÃ¼sli vs rkyv"
link = "mÃ¼sli-vs-rkyv"
description = [
    "Comparison between [`musli-zerocopy`] and [`rkyv`].",
    "",
    "Note that `musli-zerocopy` only supports the `primitives` benchmark.",
]
features = ["musli-zerocopy", "rkyv"]
expected = [
    "no-alloc",
    "no-atomic",
    "no-cstr",
    "no-isize",
    "no-nonzero-isize",
    "no-nonzero-usize",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-str",
    "no-tuple",
    "no-unsized-cstr",
    "no-unsized-osstr",
    "no-unsized-path",
    "no-unsized-str",
    "no-usize",
    "no-wrapping",
]
only = ["primitives", "packed"]

[[reports]]
id = "zerocopy"
link = "mÃ¼sli-vs-zerocopy"
description = [
    "Compares [`musli-zerocopy`] with [`zerocopy`].",
    "",
    "Note that `zerocopy` only supports packed primitives, so we're only comparing with that suite.",
]
title = "MÃ¼sli vs ZeroCopy"
features = ["musli-zerocopy", "zerocopy"]
expected = [
    "no-alloc",
    "no-atomic",
    "no-bool",
    "no-char",
    "no-cstr",
    "no-nonzero",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-str",
    "no-unsized",
]
only = ["packed"]

[[reports]]
id = "bitcode-derive"
title = "Bitcode derive"
link = "bitcode-derive"
description = [
    "Uses a custom derive-based framework which does not support everything MÃ¼sli and serde does.",
]
features = [
    "musli-wire",
    "musli-descriptive",
    "musli-storage",
    "musli-packed",
    "bitcode-derive",
]
expected = [
    "musli",
    "no-cstr",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-unsized",
    "no-wrapping",
]

[[reports]]
id = "bson"
title = "BSON"
link = "bson"
description = [
    "Specific comparison to BSON, because the format is limited in capabilities.",
]
features = [
    "musli-wire",
    "musli-descriptive",
    "musli-storage",
    "musli-packed",
    "bson",
]
expected = [
    "musli",
    "serde",
    "no-atomic-u64",
    "no-empty",
    "no-i128",
    "no-nonzero-i128",
    "no-nonzero-u128",
    "no-nonzero-u64",
    "no-number-key",
    "no-saturating-i128",
    "no-saturating-u128",
    "no-saturating-u64",
    "no-u128",
    "no-u64",
    "no-wrapping-i128",
    "no-wrapping-u128",
    "no-wrapping-u64",
]

[[reports]]
id = "miniserde"
title = "Miniserde"
link = "miniserde"
description = [
    "An experimental framework which only supports JSON and a limited number of Rust types.",
]
features = [
    "musli-json",
    "serde_json",
    # We don't support not timing a mutable buffer and there is a bug.
    # See: https://github.com/simd-lite/simd-json/issues/416
    # "simd-json",
    "miniserde",
]
expected = [
    "miniserde",
    "musli",
    "serde",
    "no-alloc-binaryheap",
    "no-alloc-btree",
    "no-alloc-map",
    "no-alloc-set",
    "no-alloc-vecdeque",
    "no-atomic",
    "no-binary-equality",
    "no-char",
    "no-cstr",
    "no-i128",
    "no-nonunit-variant",
    "no-nonzero",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-tuple",
    "no-u128",
    "no-unsized",
    "no-wrapping",
]

[footnotes]
incomplete = """
These formats do not support a wide range of Rust types. Exact level of support varies. But from a size perspective it makes size comparisons either unfair or simply an esoteric exercise since they can (or cannot) make stricter assumptions as a result.
"""
i128 = """
Lacks 128-bit support.
"""
bson = """
BSON does not support serializing directly in-place [without patches](https://github.com/mongodb/bson-rust/pull/328). As a result it is expected to be much slower.
"""
musli_value = """
`musli-value` is a heap-allocated, in-memory format. Deserialization is expected to be as fast as a dynamic in-memory structure can be traversed, but serialization requires a lot of allocations. It is only included for reference.
"""
miniserde = """
`miniserde` only supports allocated serialization (to `String`), and only supported deserialization from `&str` which if treated as opaque data would need to be validated as UTF-8.
"""
bincode1 = """
Version 1 of bincode serialization.
"""
bincode_serde = """
bincode 2 is shifting away from serde, and the serde implementation does not support borrowing from its input.
"""

[crate_footnotes]
bson = ["bson"]
musli_value = ["musli_value"]
bincode1 = ["bincode1"]
bincode_serde = ["bincode_serde"]

[size_footnotes]
musli_json = ["incomplete"]
rkyv = ["incomplete"]
serde_bitcode = []
serde_cbor = ["i128"]
serde_dlhn = ["i128"]
serde_json = ["incomplete"]
derive_bitcode = []

[[links]]
title = "`rkyv`"
href = "https://docs.rs/rkyv"

[[links]]
title = "`zerocopy`"
href = "https://docs.rs/zerocopy"

[[links]]
title = "`musli-zerocopy`"
href = "https://docs.rs/musli-zerocopy"
