[package]
name = "tests"
authors = ["John-John Tedro <udoprog@tedro.se>"]
edition = "2021"
documentation = "https://docs.rs/musli"
readme = "README.md"
homepage = "https://github.com/udoprog/musli"
repository = "https://github.com/udoprog/musli"
license = "MIT OR Apache-2.0"
publish = false
autobenches = false

[[bench]]
name = "comparison"
harness = false

[[bench]]
name = "zerocopy"
harness = false

[features]
default = ["std", "alloc"]
std = ["musli?/std", "serde?/std", "musli-zerocopy?/std", "rand/std", "serde_json?/std", "rkyv?/std", "miniserde?/std", "epserde?/std", "bincode?/std", "epserde?/std"]
alloc = ["serde?/alloc", "musli?/alloc", "musli-zerocopy?/alloc", "bincode?/alloc", "epserde?/alloc", "rkyv?/alloc"]
verbose = ["musli?/verbose"]
simdutf8 = ["musli?/simdutf8"]
parse-full = ["musli?/parse-full"]
musli-wire = ["musli/wire"]
musli-descriptive = ["musli/descriptive"]
musli-storage = ["musli/storage"]
musli-packed = ["musli/storage"]
musli-json = ["musli/json"]
musli-value = ["musli/value"]
musli-zerocopy = [
    "dep:musli-zerocopy",
    "no-alloc",
    "no-atomic",
    "no-cstr",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-str",
]
test = ["simdutf8", "musli-wire", "musli-storage", "musli-packed", "musli-descriptive", "musli-json", "musli-value"]
# skips rt benchmarks
no-rt = []

no-alloc = [
    "no-alloc-binaryheap",
    "no-alloc-btree",
    "no-alloc-map",
    "no-alloc-set",
    "no-alloc-vec",
    "no-alloc-vecdeque",
]
no-alloc-binaryheap = []
no-alloc-btree = []
no-alloc-map = []
no-alloc-set = []
no-alloc-vec = []
no-alloc-vecdeque = []
no-atomic = [
    "no-atomic-bool",
    "no-atomic-u64",
    "no-atomic-usize",
    "no-atomic-isize",
]
no-atomic-bool = []
no-atomic-u64 = []
no-atomic-usize = ["no-atomic-isize"]
no-atomic-isize = []
no-binary-equality = []
no-bool = ["no-atomic-bool"]
no-char = []
no-cstr = ["no-unsized-cstr"]
no-empty = []
no-float = []
no-i128 = [
    "no-saturating-i128",
    "no-wrapping-i128",
    "no-nonzero-i128",
]
no-isize = [
    "no-saturating-isize",
    "no-wrapping-isize",
    "no-atomic-isize",
    "no-nonzero-isize",
]
no-nonunit-variant = []
no-number-key = []
no-osstr = ["no-unsized-osstr"]
no-path = ["no-unsized-path"]
no-saturating = [
    "no-saturating-u64",
    "no-saturating-u128",
    "no-saturating-usize",
    "no-saturating-i128",
    "no-saturating-isize",
]
no-saturating-u64 = []
no-saturating-u128 = []
no-saturating-usize = []
no-saturating-i128 = []
no-saturating-isize = []
no-str = ["no-unsized-str"]
no-str-key = []
no-str-set = []
no-tuple = []
no-u128 = [
    "no-i128",
    "no-saturating-u128",
    "no-wrapping-u128",
    "no-nonzero-u128",
]
no-u64 = [
    "no-saturating-u64",
    "no-wrapping-u64",
    "no-nonzero-u64",
    "no-atomic-u64",
]
no-unsized = [
    "no-unsized-box",
    "no-unsized-cstr",
    "no-unsized-osstr",
    "no-unsized-path",
    "no-unsized-rc",
    "no-unsized-str",
]
no-unsized-box = []
no-unsized-cstr = []
no-unsized-osstr = []
no-unsized-path = []
no-unsized-rc = []
no-unsized-str = []
no-usize = [
    "no-isize",
    "no-atomic-usize",
    "no-wrapping-usize",
    "no-nonzero-usize",
]
no-wrapping = [
    "no-wrapping-u64",
    "no-wrapping-u128",
    "no-wrapping-i128",
    "no-wrapping-usize",
    "no-wrapping-isize",
]
no-wrapping-u64 = []
no-wrapping-u128 = []
no-wrapping-i128 = []
no-wrapping-usize = []
no-wrapping-isize = []
no-nonzero = [
    "no-nonzero-signed",
    "no-nonzero-u8",
    "no-nonzero-u16",
    "no-nonzero-u32",
    "no-nonzero-u64",
    "no-nonzero-u128",
    "no-nonzero-usize",
    "no-nonzero-i128",
]
no-nonzero-signed = ["no-nonzero-isize", "no-nonzero-i128"]
no-nonzero-u128 = []
no-nonzero-u16 = []
no-nonzero-u32 = []
no-nonzero-u64 = []
no-nonzero-u8 = []
no-nonzero-usize = []
no-nonzero-i128 = []
no-nonzero-isize = []

serde = [
    "dep:serde",
    "bitcode?/serde",
]
epserde = [
    "dep:epserde",
    "no-alloc-binaryheap",
    "no-alloc-btree",
    "no-alloc-map",
    "no-alloc-set",
    "no-alloc-vecdeque",
    "no-atomic",
    "no-cstr",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-unsized-rc",
    "no-wrapping",
]
serde_json = [
    "dep:serde_json",
    "serde",
]
bincode1 = [
    "dep:bincode1",
    "serde",
]
bincode-serde = [
    "dep:bincode",
    "serde",
]
bincode-derive = [
    "dep:bincode",
    "bincode?/derive",
    "no-cstr",
    "no-osstr",
    "no-saturating",
    "no-unsized-path",
]
rmp-serde = [
    "dep:rmp-serde",
    "serde",
]
postcard = [
    "dep:postcard",
    "serde",
]
rkyv = [
    "dep:rkyv",
    "no-atomic",
    "no-alloc-btree",
    "no-cstr",
    "no-alloc-map",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-alloc-set",
    "no-tuple",
    "no-unsized-osstr",
    "no-unsized-path",
    "no-usize",
    "no-wrapping",
]
bson = [
    "dep:bson",
    "serde",
    "no-empty",
    "no-number-key",
    "no-u128",
    "no-u64",
]
serde_cbor = [
    "dep:serde_cbor",
    "serde",
    "no-alloc-map",
    "no-u128",
]
dlhn = [
    "dep:dlhn",
    "serde",
    "no-alloc-map",
    "no-u128",
]
bitcode = [
    "dep:bitcode",
    "serde",
]
bitcode-derive = [
    "dep:bitcode",
    "bitcode?/derive",
    "no-cstr",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-unsized",
    "no-wrapping",
]
miniserde = [
    "dep:miniserde",
    "alloc",
    "no-atomic",
    "no-binary-equality",
    "no-alloc-btree",
    "no-alloc-binaryheap",
    "no-alloc-vecdeque",
    "no-char",
    "no-cstr",
    "no-alloc-map",
    "no-nonunit-variant",
    "no-nonzero",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-alloc-set",
    "no-tuple",
    "no-u128",
    "no-unsized",
    "no-wrapping",
]
speedy = [
    "dep:speedy",
    "no-alloc-binaryheap",
    "no-alloc-vecdeque",
    "no-atomic-bool",
    "no-atomic-usize",
    "no-cstr",
    "no-isize",
    "no-nonzero-signed",
    "no-nonzero-u128",
    "no-nonzero-u16",
    "no-nonzero-u64",
    "no-nonzero-u8",
    "no-nonzero-usize",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-unsized-rc",
    "no-wrapping",
]
simd-json = [
    "dep:simd-json",
    "serde",
]
zerocopy = [
    "dep:zerocopy",
    "no-alloc",
    "no-atomic",
    "no-bool",
    "no-char",
    "no-cstr",
    "no-nonzero",
    "no-osstr",
    "no-path",
    "no-saturating",
    "no-str",
    "no-unsized-box",
    "no-unsized-rc",
]

[dependencies]
musli = { path = "../crates/musli", version = "0.0.131", default-features = false, optional = true, features = [] }
musli-zerocopy = { path = "../crates/musli-zerocopy", version = "0.0.131", default-features = false, features = [], optional = true }
tests-macros = { path = "../tests-macros" }

anyhow = "1.0.81"
serde = { version = "1.0.197", default-features = false, optional = true, features = ["derive", "rc"] }
rand = { version = "0.9.0", default-features = false, features = ["alloc", "std_rng"] }
rmp-serde = { version = "1.1.2", optional = true }
bincode1 = { package = "bincode", version = "1.0.0", default-features = false, optional = true, features = [] }
bincode = { version = "2.0.1", default-features = false, optional = true, features = ["serde"] }
serde_json = { version = "1.0.114", default-features = false, features = ["float_roundtrip"], optional = true }
serde_cbor = { version = "0.11.2", default-features = false, features = ["std"], optional = true }
dlhn = { version = "0.1.6", default-features = false, optional = true }
bitcode = { version = "0.6.0", default-features = false, optional = true, features = ["std"] }
rkyv = { version = "0.8.10", default-features = false, optional = true, features = ["bytecheck"] }
postcard = { version = "1.0.8",  default-features = false, optional = true }
bson = { version = "2.14.0", default-features = false, optional = true }
zerocopy = { version = "0.8.13", default-features = false, optional = true, features = ["derive"] }
miniserde = { version = "0.1.38", default-features = false, optional = true }
speedy = { version = "0.8.7", optional = true }
epserde = { version = "0.8.0", default-features = false, optional = true, features = ["derive"] }
simd-json = { version = "0.15.1", default-features = false, optional = true, features = ["swar-number-parsing", "serde_impl", "runtime-detection", "128bit"] }

[dev-dependencies]
criterion = { version = "0.6.0", features = ["html_reports"] }
